// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"

#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/transport/TSocket.h>
#include <thrift/TToString.h>

#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <vector>
#include <unistd.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::match_service;
using namespace ::save_service;
using namespace std;





struct Task {
    User user;
    string type;

};

struct MessageQueue{
    queue<Task> q;
    mutex m;
    condition_variable cv;
}message_queue;

class Pool{
    public:
        void add(User user) {
            users.push_back(user);
        }

        void remove(User user) {
            for (uint32_t i = 0; i < users.size(); i++) {
                if(users[i].id == user.id) {
                    users.erase(users.begin()+i);
                    break;
                }
            }
        }

        void save_result(int a, int b) {
            printf("Match Result: %d %d\n", a, b);

            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();
                int res = client.save_data("acs_7192", "536ed098", a, b);
                if(!res) cout << "success" << endl;
                else cout << "failed" << endl;

                transport->close();
            } catch (TException& tx) {
                cout << "ERROR: " << tx.what() << '\n';
            }

        }

        void match() {
            while(users.size() > 1) {
                sort(users.begin(), users.end(), [&](User& a, User b){
                        return a.score < b.score;
                        });
                bool flag = true;
                for (uint32_t i = 1; i < users.size(); i++) {
                    auto a = users[i-1], b = users[i];
                    if (b.score - a.score <= 50)
                    {
                        users.erase(users.begin()+i-1, users.begin()+i + 1);
                        save_result(a.id, b.id);
                        break;
                    }
                }

                if(flag) break;


            }
        }

    private:
        vector<User> users;

}pool;









class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        /**
         * user: 添加的用户信息
         * info: 附加信息
         * 在匹配池中添加一个名用户
         * 
         * @param user
         * @param info
         */
        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");
            // 锁上
            unique_lock<mutex> lck(message_queue.m);  // 不需要显示解锁，函数运行完自动解锁
            message_queue.q.push({user, "add"});
            message_queue.cv.notify_all();    // 唤醒所有被条件变量卡住的线程
            return 0;
        }

        /**
         * user: 删除的用户信息
         * info: 附加信息
         * 从匹配池中删除一名用户
         * 
         * @param user
         * @param info
         */
        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");
            unique_lock<mutex> lck(message_queue.m);  // 不需要显示解锁，函数运行完自动解锁
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all();    // 唤醒所有被条件变量卡住的线程
            return 0;
        }

};


class MatchCloneFactory : virtual public MatchIfFactory {
    public:
        ~MatchCloneFactory() override = default;
        MatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
        {
            std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
            /*cout << "Incoming connection\n";
            cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
            cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
            cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
            cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";*/
            return new MatchHandler;
        }
        void releaseHandler(MatchIf* handler) override {
            delete handler;
        }
};



// 如果两个线程同时想向队列q里存东西，可能存到同一个地方就会冲突
// 用锁解决这个问题
void consume_task() {
    while(true)
    {
        unique_lock<mutex> lck(message_queue.m);
        if(message_queue.q.empty()) {
            // message_queue.cv.wait(lck);   // 游戏刚开始队列一直为空，等待唤醒；
            lck.unlock();
            pool.match();
            sleep(1);   // 每一秒匹配一次



        }
        else {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();  // 做具体任务之前就解锁，别浪费资源

            if (task.type == "add") pool.add(task.user);
            else if(task.type == "remove") pool.remove(task.user);

            pool.match();
        }
    }




}


int main(int argc, char **argv) {
    TThreadedServer server(
            std::make_shared<MatchProcessorFactory>(std::make_shared<MatchCloneFactory>()),
            std::make_shared<TServerSocket>(9090), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());

    std::cout << "Start Match Server" << std::endl;

    // 使用多线程
    thread matching_thread(consume_task);

    server.serve();
    return 0;
}

